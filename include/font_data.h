#pragma once

#include <cstdint>
#include "font5x7u.h"

namespace Haywire {

// 3x5 font for hex digits (0-9, A-F)
// Each character is encoded in 16 bits (octal format from the example)
// Layout: 3 pixels wide, 5 pixels tall
static const uint16_t Font3x5Hex[] = {
    025552, // 0 (octal)
    026222, // 1 (octal)
    071347, // 2 (octal)
    071717, // 3 (octal)
    055711, // 4 (octal)
    074716, // 5 (octal)
    024757, // 6 (octal)
    071244, // 7 (octal)
    075757, // 8 (octal)
    075711, // 9 (octal)
    025755, // A (octal)
    065656, // B (octal)
    034443, // C (octal)
    065556, // D (octal)
    074647, // E (octal)
    074744  // F (octal)
};

// 5x7 font glyphs packed in 64-bit values
// Format: glyph is 5x7 pixels in a 6x8 box
// Bits 40-47 contain 6 pixels of row 0, bits 34-39 contain row 1, etc.
#define GLYPH57(b0,b1,b2,b3,b4,b5,b6) \
    ((uint64_t(b0) << 40) | (uint64_t(b1) << 34) | (uint64_t(b2) << 28) | \
     (uint64_t(b3) << 22) | (uint64_t(b4) << 16) | (uint64_t(b5) << 10) | \
     (uint64_t(b6) << 4))


#ifdef UNUSED
// Basic ASCII character set (5x7 font)
static const uint64_t Font5x7[] = {
    // Control characters 0-31 (use default/missing glyph)
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    
    // Printable ASCII starting at 32 (space)
    GLYPH57(0x00,0x00,0x00,0x00,0x00,0x00,0x00), // 32: space
    GLYPH57(0x20,0x20,0x20,0x20,0x00,0x20,0x00), // 33: !
    GLYPH57(0x50,0x50,0x50,0x00,0x00,0x00,0x00), // 34: "
    GLYPH57(0x00,0x50,0xF8,0x50,0xF8,0x50,0x00), // 35: #
    GLYPH57(0x00,0x70,0xA0,0x70,0x28,0x70,0x00), // 36: $
    GLYPH57(0x80,0x90,0x20,0x40,0x90,0x10,0x00), // 37: %
    GLYPH57(0x00,0x40,0xA0,0x40,0xA0,0x50,0x00), // 38: &
    GLYPH57(0x20,0x20,0x20,0x00,0x00,0x00,0x00), // 39: '
    GLYPH57(0x20,0x40,0x40,0x40,0x40,0x20,0x00), // 40: (
    GLYPH57(0x40,0x20,0x20,0x20,0x20,0x40,0x00), // 41: )
    GLYPH57(0x00,0x50,0x20,0x70,0x20,0x50,0x00), // 42: *
    GLYPH57(0x00,0x20,0x20,0xF8,0x20,0x20,0x00), // 43: +
    GLYPH57(0x00,0x00,0x00,0x00,0x30,0x20,0x40), // 44: ,
    GLYPH57(0x00,0x00,0x00,0xF0,0x00,0x00,0x00), // 45: -
    GLYPH57(0x00,0x00,0x00,0x00,0x60,0x60,0x00), // 46: .
    GLYPH57(0x00,0x10,0x20,0x40,0x80,0x00,0x00), // 47: /
    
    // Digits 0-9 (48-57)
    GLYPH57(0x20,0x50,0x50,0x50,0x50,0x20,0x00), // 48: 0
    GLYPH57(0x20,0x60,0x20,0x20,0x20,0x70,0x00), // 49: 1
    GLYPH57(0x60,0x90,0x10,0x20,0x40,0xF0,0x00), // 50: 2
    GLYPH57(0xF0,0x10,0x60,0x10,0x90,0x60,0x00), // 51: 3
    GLYPH57(0x20,0x60,0xA0,0xF0,0x20,0x20,0x00), // 52: 4
    GLYPH57(0xF0,0x80,0xE0,0x10,0x90,0x60,0x00), // 53: 5
    GLYPH57(0x60,0x80,0xE0,0x90,0x90,0x60,0x00), // 54: 6
    GLYPH57(0xF0,0x10,0x20,0x20,0x40,0x40,0x00), // 55: 7
    GLYPH57(0x60,0x90,0x60,0x90,0x90,0x60,0x00), // 56: 8
    GLYPH57(0x60,0x90,0x90,0x70,0x10,0x60,0x00), // 57: 9
    
    // Symbols (58-64)
    GLYPH57(0x00,0x60,0x60,0x00,0x60,0x60,0x00), // 58: :
    GLYPH57(0x00,0x60,0x60,0x00,0x60,0x40,0x80), // 59: ;
    GLYPH57(0x00,0x10,0x20,0x40,0x20,0x10,0x00), // 60: <
    GLYPH57(0x00,0x00,0xF0,0x00,0xF0,0x00,0x00), // 61: =
    GLYPH57(0x00,0x40,0x20,0x10,0x20,0x40,0x00), // 62: >
    GLYPH57(0x20,0x50,0x10,0x20,0x00,0x20,0x00), // 63: ?
    GLYPH57(0x60,0x90,0xB0,0xB0,0x80,0x60,0x00), // 64: @
    
    // Uppercase letters A-Z (65-90)
    GLYPH57(0x60,0x90,0x90,0xF0,0x90,0x90,0x00), // 65: A
    GLYPH57(0xE0,0x90,0xE0,0x90,0x90,0xE0,0x00), // 66: B
    GLYPH57(0x60,0x90,0x80,0x80,0x90,0x60,0x00), // 67: C
    GLYPH57(0xE0,0x90,0x90,0x90,0x90,0xE0,0x00), // 68: D
    GLYPH57(0xF0,0x80,0xE0,0x80,0x80,0xF0,0x00), // 69: E
    GLYPH57(0xF0,0x80,0xE0,0x80,0x80,0x80,0x00), // 70: F
    GLYPH57(0x60,0x90,0x80,0xB0,0x90,0x70,0x00), // 71: G
    GLYPH57(0x90,0x90,0xF0,0x90,0x90,0x90,0x00), // 72: H
    GLYPH57(0x70,0x20,0x20,0x20,0x20,0x70,0x00), // 73: I
    GLYPH57(0x10,0x10,0x10,0x10,0x90,0x60,0x00), // 74: J
    GLYPH57(0x90,0xA0,0xC0,0xC0,0xA0,0x90,0x00), // 75: K
    GLYPH57(0x80,0x80,0x80,0x80,0x80,0xF0,0x00), // 76: L
    GLYPH57(0x90,0xF0,0xF0,0x90,0x90,0x90,0x00), // 77: M
    GLYPH57(0x90,0xD0,0xD0,0xB0,0xB0,0x90,0x00), // 78: N
    GLYPH57(0x60,0x90,0x90,0x90,0x90,0x60,0x00), // 79: O
    GLYPH57(0xE0,0x90,0x90,0xE0,0x80,0x80,0x00), // 80: P
    GLYPH57(0x60,0x90,0x90,0x90,0xD0,0x60,0x10), // 81: Q
    GLYPH57(0xE0,0x90,0x90,0xE0,0xA0,0x90,0x00), // 82: R
    GLYPH57(0x60,0x90,0x40,0x20,0x90,0x60,0x00), // 83: S
    GLYPH57(0x70,0x20,0x20,0x20,0x20,0x20,0x00), // 84: T
    GLYPH57(0x90,0x90,0x90,0x90,0x90,0x60,0x00), // 85: U
    GLYPH57(0x90,0x90,0x90,0x90,0x60,0x60,0x00), // 86: V
    GLYPH57(0x90,0x90,0x90,0xF0,0xF0,0x90,0x00), // 87: W
    GLYPH57(0x90,0x90,0x60,0x60,0x90,0x90,0x00), // 88: X
    GLYPH57(0x50,0x50,0x50,0x20,0x20,0x20,0x00), // 89: Y
    GLYPH57(0xF0,0x10,0x20,0x40,0x80,0xF0,0x00), // 90: Z
    
    // Symbols (91-96)
    GLYPH57(0x70,0x40,0x40,0x40,0x40,0x70,0x00), // 91: [
    GLYPH57(0x00,0x80,0x40,0x20,0x10,0x00,0x00), // 92: backslash
    GLYPH57(0x70,0x10,0x10,0x10,0x10,0x70,0x00), // 93: ]
    GLYPH57(0x20,0x50,0x00,0x00,0x00,0x00,0x00), // 94: ^
    GLYPH57(0x00,0x00,0x00,0x00,0x00,0xF0,0x00), // 95: _
    GLYPH57(0x40,0x20,0x00,0x00,0x00,0x00,0x00), // 96: `
    
    // Lowercase letters a-z (97-122)
    GLYPH57(0x00,0x00,0x70,0x90,0xB0,0x50,0x00), // 97: a
    GLYPH57(0x80,0x80,0xE0,0x90,0x90,0xE0,0x00), // 98: b
    GLYPH57(0x00,0x00,0x60,0x80,0x80,0x60,0x00), // 99: c
    GLYPH57(0x10,0x10,0x70,0x90,0x90,0x70,0x00), // 100: d
    GLYPH57(0x00,0x00,0x60,0xB0,0xC0,0x60,0x00), // 101: e
    GLYPH57(0x20,0x50,0x40,0xE0,0x40,0x40,0x00), // 102: f
    GLYPH57(0x00,0x00,0x70,0x90,0x60,0x80,0x70), // 103: g
    GLYPH57(0x80,0x80,0xE0,0x90,0x90,0x90,0x00), // 104: h
    GLYPH57(0x20,0x00,0x60,0x20,0x20,0x70,0x00), // 105: i
    GLYPH57(0x10,0x00,0x10,0x10,0x10,0x50,0x20), // 106: j
    GLYPH57(0x80,0x80,0xA0,0xC0,0xA0,0x90,0x00), // 107: k
    GLYPH57(0x60,0x20,0x20,0x20,0x20,0x70,0x00), // 108: l
    GLYPH57(0x00,0x00,0xA0,0xF0,0x90,0x90,0x00), // 109: m
    GLYPH57(0x00,0x00,0xE0,0x90,0x90,0x90,0x00), // 110: n
    GLYPH57(0x00,0x00,0x60,0x90,0x90,0x60,0x00), // 111: o
    GLYPH57(0x00,0x00,0xE0,0x90,0x90,0xE0,0x80), // 112: p
    GLYPH57(0x00,0x00,0x70,0x90,0x90,0x70,0x10), // 113: q
    GLYPH57(0x00,0x00,0xE0,0x90,0x80,0x80,0x00), // 114: r
    GLYPH57(0x00,0x00,0x70,0xC0,0x30,0xE0,0x00), // 115: s
    GLYPH57(0x40,0x40,0xE0,0x40,0x40,0x30,0x00), // 116: t
    GLYPH57(0x00,0x00,0x90,0x90,0x90,0x70,0x00), // 117: u
    GLYPH57(0x00,0x00,0x90,0x90,0x60,0x60,0x00), // 118: v
    GLYPH57(0x00,0x00,0x90,0x90,0xF0,0x90,0x00), // 119: w
    GLYPH57(0x00,0x00,0x90,0x60,0x60,0x90,0x00), // 120: x
    GLYPH57(0x00,0x00,0x90,0x90,0x70,0x10,0x60), // 121: y
    GLYPH57(0x00,0x00,0xF0,0x20,0x40,0xF0,0x00), // 122: z
    
    // Symbols (123-127)
    GLYPH57(0x30,0x40,0x80,0x40,0x40,0x30,0x00), // 123: {
    GLYPH57(0x20,0x20,0x20,0x20,0x20,0x20,0x00), // 124: |
    GLYPH57(0x60,0x10,0x08,0x10,0x10,0x60,0x00), // 125: }
    GLYPH57(0x00,0x00,0x48,0xB0,0x00,0x00,0x00), // 126: ~
    GLYPH57(0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0x00)  // 127: DEL (block)
};

// Helper function to get a 5x7 font glyph
inline uint64_t GetGlyph57(unsigned char ch) {
    if (ch < 128) {
        return Font5x7[ch];
    }
    return 0; // Return empty glyph for non-ASCII
}
#endif


// Helper function to get a 3x5 hex font glyph
inline uint16_t GetGlyph3x5Hex(unsigned char nibble) {
    if (nibble < 16) {
        return Font3x5Hex[nibble];
    }
    return 0;
}

// Calculate high contrast opposite color
inline uint32_t CalcHiContrastOpposite(uint32_t color) {
    uint8_t r = (color >> 0) & 0xFF;
    uint8_t g = (color >> 8) & 0xFF;
    uint8_t b = (color >> 16) & 0xFF;
    
    r = (r < 127) ? 255 : 0;
    g = (g < 127) ? 255 : 0;
    b = (b < 127) ? 255 : 0;
    
    return 0xFF000000 | (b << 16) | (g << 8) | r;
}

} // namespace Haywire